
# This is a basic workflow to help you get started with Actions

name: Workflow integration

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:
    branches:
     - main
     - develop
  pull_request:
    branches:
      - main
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  dry_run: # health check job for testing and code formatting check
    name: test service
    runs-on: ubuntu-latest # os for running the job
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8 ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: build docker container
        run: >
          docker  build ./docker -f ./docker/dummy_service.Dockerfile  -t test_container:latest
      - name: create output runfolders
        run: mkdir fastq logs
      - name: run container
        run: >
          docker run -d -p 8888:8888 -v ./tests/runfolders:/runfolders:rw -v ./fastq:/fastq:rw -v ./logs:/bclconvert_logs test_container:latest sh -c 'bclconvert-ws --debug --config config/ --port 8888'
      - name: start processing
        run: >
          curl -X POST --data '{"additional_args": ""}' http://127.0.0.1:8888/api/1.0/start/runfolder1
      - name: check status:
        run: >
          curl http://127.0.0.1:8888/api/1.0/status/1
      - name: sleep:
        run: sleep 15
      - name: check that status is done
        run: >
          curl http://127.0.0.1:8888/api/1.0/status/1 | python -c 'import sys; import json; exit(0) if (json.loads(sys.stdin.read()))["state"] == "done" else exit(1)'
